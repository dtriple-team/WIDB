/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase() :
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler),
    frameCountInteraction2Interval(0)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 240, 280);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    box1.setPosition(0, 0, 240, 280);
    box1.setColor(touchgfx::Color::getColorFromRGB(209, 209, 209));
    add(box1);

    textArea2.setPosition(13, 233, 214, 39);
    textArea2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", touchgfx::TypedText(T_FIRST_GNSS).getText());
    textArea2.setWildcard(textArea2Buffer);
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SVXS));
    add(textArea2);

    textArea3.setXY(13, 259);
    textArea3.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea3.setLinespacing(0);
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", touchgfx::TypedText(T_UPDATE_CNT).getText());
    textArea3.setWildcard(textArea3Buffer);
    textArea3.resizeToCurrentText();
    textArea3.setTypedText(touchgfx::TypedText(T_GNSS_UPDATE_CNT));
    textArea3.setVisible(false);
    add(textArea3);

    scrollableContainer1.setPosition(0, 35, 240, 191);
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    scrollableContainer1.setScrollbarsAlpha(255);
    textArea4.setXY(13, 0);
    textArea4.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    textArea4.setLinespacing(0);
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5P4Y));
    scrollableContainer1.add(textArea4);

    GPGGA_detail.setPosition(13, 13, 214, 26);
    GPGGA_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGGA_detail.setLinespacing(0);
    GPGGA_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGGA_detailBuffer, GPGGA_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGGA_DETAIL).getText());
    GPGGA_detail.setWildcard(GPGGA_detailBuffer);
    GPGGA_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_83LK));
    scrollableContainer1.add(GPGGA_detail);

    GPGGA_text.setXY(13, 13);
    GPGGA_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGGA_text.setLinespacing(0);
    GPGGA_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VY29));
    scrollableContainer1.add(GPGGA_text);

    GPGLL_detail.setPosition(13, 39, 214, 26);
    GPGLL_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGLL_detail.setLinespacing(0);
    GPGLL_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGLL_detailBuffer, GPGLL_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGLL_DETAIL).getText());
    GPGLL_detail.setWildcard(GPGLL_detailBuffer);
    GPGLL_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_K1CL));
    scrollableContainer1.add(GPGLL_detail);

    GPGLL_text.setXY(13, 39);
    GPGLL_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGLL_text.setLinespacing(0);
    GPGLL_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V2E0));
    scrollableContainer1.add(GPGLL_text);

    GPGSA_detail.setPosition(13, 65, 214, 26);
    GPGSA_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSA_detail.setLinespacing(0);
    GPGSA_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSA_detailBuffer, GPGSA_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSA_DETAIL).getText());
    GPGSA_detail.setWildcard(GPGSA_detailBuffer);
    GPGSA_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OH19));
    scrollableContainer1.add(GPGSA_detail);

    GPGSA_text.setXY(13, 65);
    GPGSA_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSA_text.setLinespacing(0);
    GPGSA_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZHN4));
    scrollableContainer1.add(GPGSA_text);

    GPGSV_detail.setPosition(13, 117, 214, 26);
    GPGSV_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV_detail.setLinespacing(0);
    GPGSV_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV_detailBuffer, GPGSV_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV_DETAIL).getText());
    GPGSV_detail.setWildcard(GPGSV_detailBuffer);
    GPGSV_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EQXE));
    scrollableContainer1.add(GPGSV_detail);

    GPGSV_text.setXY(13, 117);
    GPGSV_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV_text.setLinespacing(0);
    GPGSV_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_997B));
    scrollableContainer1.add(GPGSV_text);

    GPGSV2_detail.setPosition(13, 143, 214, 26);
    GPGSV2_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV2_detail.setLinespacing(0);
    GPGSV2_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV2_detailBuffer, GPGSV2_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV2_DETAIL).getText());
    GPGSV2_detail.setWildcard(GPGSV2_detailBuffer);
    GPGSV2_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6OB));
    scrollableContainer1.add(GPGSV2_detail);

    GPGSV2_text.setXY(13, 143);
    GPGSV2_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV2_text.setLinespacing(0);
    GPGSV2_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8RM8));
    scrollableContainer1.add(GPGSV2_text);

    GPGSV3_detail.setPosition(13, 169, 214, 26);
    GPGSV3_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV3_detail.setLinespacing(0);
    GPGSV3_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV3_detailBuffer, GPGSV3_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV3_DETAIL).getText());
    GPGSV3_detail.setWildcard(GPGSV3_detailBuffer);
    GPGSV3_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YH13));
    scrollableContainer1.add(GPGSV3_detail);

    GPGSV3_text.setXY(13, 169);
    GPGSV3_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV3_text.setLinespacing(0);
    GPGSV3_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0C26));
    scrollableContainer1.add(GPGSV3_text);

    GPGSV4_detail.setPosition(13, 195, 214, 26);
    GPGSV4_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV4_detail.setLinespacing(0);
    GPGSV4_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV4_detailBuffer, GPGSV4_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV_DETAIL).getText());
    GPGSV4_detail.setWildcard(GPGSV4_detailBuffer);
    GPGSV4_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3L2T));
    scrollableContainer1.add(GPGSV4_detail);

    GPGSV4_text.setXY(13, 195);
    GPGSV4_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV4_text.setLinespacing(0);
    GPGSV4_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XVRK));
    scrollableContainer1.add(GPGSV4_text);

    GPGSV5_detail.setPosition(13, 221, 214, 26);
    GPGSV5_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV5_detail.setLinespacing(0);
    GPGSV5_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV5_detailBuffer, GPGSV5_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV2_DETAIL).getText());
    GPGSV5_detail.setWildcard(GPGSV5_detailBuffer);
    GPGSV5_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ID4V));
    scrollableContainer1.add(GPGSV5_detail);

    GPGSV5_text.setXY(13, 221);
    GPGSV5_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV5_text.setLinespacing(0);
    GPGSV5_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_17H8));
    scrollableContainer1.add(GPGSV5_text);

    GPGSV6_detail.setPosition(13, 247, 214, 26);
    GPGSV6_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV6_detail.setLinespacing(0);
    GPGSV6_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV6_detailBuffer, GPGSV6_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV3_DETAIL).getText());
    GPGSV6_detail.setWildcard(GPGSV6_detailBuffer);
    GPGSV6_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GSZF));
    scrollableContainer1.add(GPGSV6_detail);

    GPGSV6_text.setXY(13, 247);
    GPGSV6_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV6_text.setLinespacing(0);
    GPGSV6_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QU1M));
    scrollableContainer1.add(GPGSV6_text);

    GPGSV7_detail.setPosition(13, 273, 214, 26);
    GPGSV7_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV7_detail.setLinespacing(0);
    GPGSV7_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV7_detailBuffer, GPGSV7_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV_DETAIL).getText());
    GPGSV7_detail.setWildcard(GPGSV7_detailBuffer);
    GPGSV7_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WY8T));
    scrollableContainer1.add(GPGSV7_detail);

    GPGSV7_text.setXY(13, 273);
    GPGSV7_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV7_text.setLinespacing(0);
    GPGSV7_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A1R8));
    scrollableContainer1.add(GPGSV7_text);

    GPGSV8_detail.setPosition(13, 299, 214, 26);
    GPGSV8_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPGSV8_detail.setLinespacing(0);
    GPGSV8_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPGSV8_detailBuffer, GPGSV8_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPGSV2_DETAIL).getText());
    GPGSV8_detail.setWildcard(GPGSV8_detailBuffer);
    GPGSV8_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NTL9));
    scrollableContainer1.add(GPGSV8_detail);

    GPGSV8_text.setXY(13, 299);
    GPGSV8_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPGSV8_text.setLinespacing(0);
    GPGSV8_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3PKV));
    scrollableContainer1.add(GPGSV8_text);

    GPRMC_detail.setPosition(13, 91, 214, 26);
    GPRMC_detail.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    GPRMC_detail.setLinespacing(0);
    GPRMC_detail.setWideTextAction(WIDE_TEXT_CHARWRAP);
    Unicode::snprintf(GPRMC_detailBuffer, GPRMC_DETAIL_SIZE, "%s", touchgfx::TypedText(T_GPRMC_DETAIL).getText());
    GPRMC_detail.setWildcard(GPRMC_detailBuffer);
    GPRMC_detail.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UU7R));
    scrollableContainer1.add(GPRMC_detail);

    GPRMC_text.setXY(13, 91);
    GPRMC_text.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    GPRMC_text.setLinespacing(0);
    GPRMC_text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_68CC));
    scrollableContainer1.add(GPRMC_text);

    add(scrollableContainer1);

    flexButton1.setBoxWithBorderPosition(0, 0, 48, 47);
    flexButton1.setBorderSize(5);
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexButton1.setAlpha(0);
    flexButton1.setAction(flexButtonCallback);
    flexButton1.setPosition(179, 4, 48, 47);
    add(flexButton1);

    shape1.setPosition(183, 7, 40, 40);
    shape1.setOrigin(0.0f, 0.0f);
    shape1.setScale(1.0f, 1.0f);
    shape1.setAngle(0.0f);
    shape1Painter.setColor(touchgfx::Color::getColorFromRGB(64, 134, 255));
    shape1.setPainter(shape1Painter);
    const touchgfx::AbstractShape::ShapePoint<float> shape1Points[3] = { { 40.0f, 0.0f }, { 0.0f, 20.0f }, { 40.0f, 40.0f } };
    shape1.setShape(shape1Points);
    add(shape1);

    gps_progress.setXY(40, 12);
    gps_progress.setProgressIndicatorPosition(0, 0, 15, 15);
    gps_progress.setRange(0, 1);
    gps_progress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    gps_progress.setBackground(touchgfx::Bitmap(BITMAP_GPS_NOTCONNECTED_ID));
    gps_progress.setBitmap(BITMAP_GPS_CONNECTED_ID);
    gps_progress.setValue(1);
    gps_progress.setAnchorAtZero(true);
    add(gps_progress);

    lte_progress.setXY(16, 13);
    lte_progress.setProgressIndicatorPosition(0, 0, 15, 12);
    lte_progress.setRange(0, 4);
    lte_progress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    lte_progress.setBackground(touchgfx::Bitmap(BITMAP_LTE_NOTCONNECTED_ID));
    lte_progress.setBitmap(BITMAP_LTE_CONNECTED_ID);
    lte_progress.setValue(4);
    lte_progress.setAnchorAtZero(true);
    add(lte_progress);

    imageProgress1.setXY(138, 12);
    imageProgress1.setProgressIndicatorPosition(0, 0, 35, 16);
    imageProgress1.setRange(0, 100);
    imageProgress1.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    imageProgress1.setBackground(touchgfx::Bitmap(BITMAP_GROUP_3_ID));
    imageProgress1.setBitmap(BITMAP_GROUP_6_ID);
    imageProgress1.setValue(1);
    imageProgress1.setAnchorAtZero(true);
    add(imageProgress1);
}

Screen2ViewBase::~Screen2ViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen2ViewBase::setupScreen()
{

}

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
    }
}

void Screen2ViewBase::handleTickEvent()
{
    frameCountInteraction2Interval++;
    if(frameCountInteraction2Interval == TICK_INTERACTION2_INTERVAL)
    {
        //Interaction2
        //When every N tick execute C++ code
        //Execute C++ code
        extern uint8_t gpsRSSI_0_1;
        extern uint8_t lteRSSI_0_4;
        extern uint8_t battVal;
        extern cat_m1_Status_Rtt_Gps_t cat_m1_Status_Rtt_Gps;
        extern uint8_t svTotalNum;
        extern uint8_t svMyNum;
        
        gps_progress.setValue(gpsRSSI_0_1);
        gps_progress.invalidate();
        lte_progress.setValue(lteRSSI_0_4);
        lte_progress.invalidate();
        imageProgress1.setValue(battVal);
        imageProgress1.invalidate();
        
        uint16_t GPGGA_data[GPGGA_DETAIL_SIZE];
        for(int i=0; i<GPGGA_DETAIL_SIZE; i++){
        	GPGGA_data[i] = cat_m1_Status_Rtt_Gps.GPGGA[i+7];
        }
        Unicode::snprintf(GPGGA_detailBuffer, GPGGA_DETAIL_SIZE, "%s\0", GPGGA_data);
        GPGGA_detail.invalidate();
        
        uint16_t GPGLL_data[GPGLL_DETAIL_SIZE];
        for(int i=0; i<GPGLL_DETAIL_SIZE; i++){
        	GPGLL_data[i] = cat_m1_Status_Rtt_Gps.GPGLL[i+7];
        }
        Unicode::snprintf(GPGLL_detailBuffer, GPGLL_DETAIL_SIZE, "%s", GPGLL_data);
        GPGLL_detail.invalidate();
        
        uint16_t GPGSA_data[GPGSA_DETAIL_SIZE];
        for(int i=0; i<GPGSA_DETAIL_SIZE; i++){
        	GPGSA_data[i] = cat_m1_Status_Rtt_Gps.GPGSA[i+7];
        }
        Unicode::snprintf(GPGSA_detailBuffer, GPGSA_DETAIL_SIZE, "%s", GPGSA_data);
        GPGSA_detail.invalidate();
        
        uint16_t GPGSV_data[GPGSV_DETAIL_SIZE];
        for(int i=0; i<GPGSV_DETAIL_SIZE; i++){
        	GPGSV_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV_detailBuffer, GPGSV_DETAIL_SIZE, "%s", GPGSV_data);
        if(svMyNum == 1) GPGSV_detail.invalidate();
        
        uint16_t GPGSV2_data[GPGSV2_DETAIL_SIZE];
        for(int i=0; i<GPGSV2_DETAIL_SIZE; i++){
        	GPGSV2_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV2_detailBuffer, GPGSV2_DETAIL_SIZE, "%s", GPGSV2_data);
        if(svTotalNum == 1) {
        	Unicode::snprintf(GPGSV2_detailBuffer, GPGSV2_DETAIL_SIZE, "--");
        	GPGSV2_detail.invalidate();
        }
        if(svMyNum == 2) GPGSV2_detail.invalidate();
        
        uint16_t GPGSV3_data[GPGSV3_DETAIL_SIZE];
        for(int i=0; i<GPGSV3_DETAIL_SIZE; i++){
        	GPGSV3_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV3_detailBuffer, GPGSV3_DETAIL_SIZE, "%s", GPGSV3_data);
        if(svTotalNum == 1 || svTotalNum == 2){
        	Unicode::snprintf(GPGSV3_detailBuffer, GPGSV3_DETAIL_SIZE, "--");
        	GPGSV3_detail.invalidate();
        }
        if(svMyNum == 3) GPGSV3_detail.invalidate();
        
        uint16_t GPGSV4_data[GPGSV4_DETAIL_SIZE];
        for(int i=0; i<GPGSV4_DETAIL_SIZE; i++){
        	GPGSV4_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV4_detailBuffer, GPGSV4_DETAIL_SIZE, "%s", GPGSV4_data);
        if(svTotalNum == 1 || svTotalNum == 2 || svTotalNum == 3){
        	Unicode::snprintf(GPGSV4_detailBuffer, GPGSV4_DETAIL_SIZE, "--");
        	GPGSV4_detail.invalidate();
        }
        if(svMyNum == 4) GPGSV4_detail.invalidate();
        
        uint16_t GPGSV5_data[GPGSV5_DETAIL_SIZE];
        for(int i=0; i<GPGSV5_DETAIL_SIZE; i++){
        	GPGSV5_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV5_detailBuffer, GPGSV5_DETAIL_SIZE, "%s", GPGSV5_data);
        if(svTotalNum == 1 || svTotalNum == 2 || svTotalNum == 3 || svTotalNum == 4){
        	Unicode::snprintf(GPGSV5_detailBuffer, GPGSV5_DETAIL_SIZE, "--");
        	GPGSV5_detail.invalidate();
        }
        if(svMyNum == 5) GPGSV5_detail.invalidate();
        
        uint16_t GPGSV6_data[GPGSV6_DETAIL_SIZE];
        for(int i=0; i<GPGSV6_DETAIL_SIZE; i++){
        	GPGSV6_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV6_detailBuffer, GPGSV6_DETAIL_SIZE, "%s", GPGSV6_data);
        if(svTotalNum == 1 || svTotalNum == 2 || svTotalNum == 3 || svTotalNum == 4 || svTotalNum == 5){
        	Unicode::snprintf(GPGSV6_detailBuffer, GPGSV6_DETAIL_SIZE, "--");
        	GPGSV6_detail.invalidate();
        }
        if(svMyNum == 6) GPGSV6_detail.invalidate();
        
        uint16_t GPGSV7_data[GPGSV7_DETAIL_SIZE];
        for(int i=0; i<GPGSV7_DETAIL_SIZE; i++){
        	GPGSV7_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV7_detailBuffer, GPGSV7_DETAIL_SIZE, "%s", GPGSV7_data);
        if(svTotalNum == 1 || svTotalNum == 2 || svTotalNum == 3 || svTotalNum == 4 || svTotalNum == 5 || svTotalNum == 6){
        	Unicode::snprintf(GPGSV7_detailBuffer, GPGSV7_DETAIL_SIZE, "--");
        	GPGSV7_detail.invalidate();
        }
        if(svMyNum == 7) GPGSV7_detail.invalidate();
        
        uint16_t GPGSV8_data[GPGSV8_DETAIL_SIZE];
        for(int i=0; i<GPGSV8_DETAIL_SIZE; i++){
        	GPGSV8_data[i] = cat_m1_Status_Rtt_Gps.GPGSV[i+7];
        }
        Unicode::snprintf(GPGSV8_detailBuffer, GPGSV8_DETAIL_SIZE, "%s", GPGSV8_data);
        if(svTotalNum == 1 || svTotalNum == 2 || svTotalNum == 3 || svTotalNum == 4 || svTotalNum == 5 || svTotalNum == 6 || svTotalNum == 7){
        	Unicode::snprintf(GPGSV8_detailBuffer, GPGSV8_DETAIL_SIZE, "--");
        	GPGSV8_detail.invalidate();
        }
        if(svMyNum == 8) GPGSV8_detail.invalidate();
        
        uint16_t GPRMC_data[GPRMC_DETAIL_SIZE];
        for(int i=0; i<GPRMC_DETAIL_SIZE; i++){
        	GPRMC_data[i] = cat_m1_Status_Rtt_Gps.GPRMC[i+7];
        }
        Unicode::snprintf(GPRMC_detailBuffer, GPRMC_DETAIL_SIZE, "%s", GPRMC_data);
        GPRMC_detail.invalidate();
        
        extern uint16_t GNSS_display_data[100];
        Unicode::snprintf(textArea2Buffer, TEXTAREA2_SIZE, "%s", GNSS_display_data);
        textArea2.invalidate();
        frameCountInteraction2Interval = 0;
    }
}
