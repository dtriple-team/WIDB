/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x66, 0xa, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x2, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x0, // @0 "Device turns off\nafter <> seconds."
    0x2, 0xcd08, 0x20, 0xd6c4, 0xc5d0, 0xa, 0xc7a5, 0xce58, 0xac00, 0x20, 0xaebc, 0xc9d1, 0xb2c8, 0xb2e4, 0x2e, 0x0, // @34 "<>? ??\n??? ????."
    0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x0, // @50 "Communication\nCycle"
    0x2, 0xc2dc, 0xac04, 0xa, 0x2, 0xbd84, 0x0, // @70 "<>??\n<>?"
    0x2, 0xc2dc, 0xac04, 0x20, 0x2, 0xbd84, 0x0, // @77 "<>?? <>?"
    0x2, 0x68, 0xa, 0x2, 0x6d, 0x0, // @84 "<>h\n<>m"
    0x2, 0x68, 0x20, 0x2, 0x6d, 0x0, // @90 "<>h <>m"
    0x2, 0xc6d4, 0x20, 0x2, 0xc77c, 0x0, // @96 "<>? <>?"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x0, // @102 "Screen brightness"
    0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x57, 0x69, 0x46, 0x69, 0x2e, 0x2e, 0x2e, 0x0, // @120 "Searching WiFi..."
    0xacbd, 0xc0c1, 0xbd81, 0xb3c4, 0x20, 0xad6c, 0xbbf8, 0xc2dc, 0x20, 0xc0b0, 0xd638, 0xb300, 0xb85c, 0x20, 0x32, 0x35, 0x33, 0x0, // @138 "???? ??? ???? 253"
    0x4e, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0, // @156 "No notifications"
    0x2, 0x2d, 0x2, 0x0, // @173 "<>-<>"
    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x26, 0x20, 0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x73, 0x0, // @177 "Sound & Haptics"
    0x28, 0x57, 0x69, 0x46, 0x69, 0x20, 0x4d, 0x41, 0x43, 0x20, 0x41, 0x44, 0x44, 0x29, 0x0, // @193 "(WiFi MAC ADD)"
    0x42, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x20, 0x64, 0x61, 0x74, 0x61, 0x0, // @208 "Biometric data"
    0x46, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x0, // @223 "Falls Detected"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @238 "Screen on time"
    0x69, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @253 "id information"
    0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x0, // @268 "service number"
    0x28, 0x42, 0x4c, 0x45, 0x20, 0x4d, 0x41, 0x43, 0x20, 0x41, 0x44, 0x44, 0x29, 0x0, // @283 "(BLE MAC ADD)"
    0x2, 0x20, 0x73, 0x74, 0x65, 0x70, 0x73, 0x0, // @297 "<> steps"
    0x46, 0x69, 0x6e, 0x64, 0x20, 0x6d, 0x79, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x0, // @305 "Find my phone"
    0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x0, // @319 "serial number"
    0x20, 0x2, 0x20, 0x62, 0x70, 0x6d, 0x0, // @333 " <> bpm"
    0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x0, // @340 "Network Info"
    0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @353 "Notification"
    0x57, 0x69, 0x46, 0x69, 0x20, 0x4d, 0x41, 0x43, 0x20, 0x41, 0x44, 0x44, 0x0, // @366 "WiFi MAC ADD"
    0x57, 0x69, 0x46, 0x69, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x0, // @379 "WiFi setting"
    0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x0, // @392 "version info"
    0x42, 0x4c, 0x45, 0x20, 0x4d, 0x41, 0x43, 0x20, 0x41, 0x44, 0x44, 0x0, // @405 "BLE MAC ADD"
    0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x0, // @417 "Device Info"
    0x46, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x0, // @429 "Falls occur"
    0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @441 "Information"
    0x20, 0x2, 0x20, 0x25, 0x0, // @453 " <> %"
    0x2, 0x20, 0xac78, 0xc74c, 0x0, // @458 "<> ??"
    0x2, 0x62, 0x70, 0x6d, 0x0, // @463 "<>bpm"
    0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x0, // @468 "model name"
    0x27, 0x20, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0, // @479 "' "      "
    0x2, 0xac78, 0xc74c, 0x0, // @489 "<>??"
    0x48, 0x65, 0x61, 0x72, 0x74, 0x72, 0x61, 0x74, 0x65, 0x0, // @493 "Heartrate"
    0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x66, 0x0, // @503 "Power off"
    0x28, 0x20, 0x29, 0x20, 0x7c, 0x20, 0x20, 0x20, 0x0, // @513 "( ) |   "
    0x28, 0xc11c, 0xbe44, 0xc2a4, 0x20, 0xbc88, 0xd638, 0x29, 0x0, // @522 "(??? ??)"
    0x28, 0xc2dc, 0xb9ac, 0xc5bc, 0x20, 0xbc88, 0xd638, 0x29, 0x0, // @531 "(??? ??)"
    0x2, 0x73, 0x0, // @540 "<>s"
    0x2, 0xcd08, 0x0, // @543 "<>?"
    0x44, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x0, // @546 "Disaster"
    0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x0, // @555 "Dispatch"
    0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x0, // @564 "Language"
    0xb0b4, 0x20, 0xd734, 0xb300, 0xd3f0, 0x20, 0xcc3e, 0xae30, 0x0, // @573 "? ??? ??"
    0xd1b5, 0xc2e0, 0x20, 0xc8fc, 0xae30, 0x20, 0xc124, 0xc815, 0x0, // @582 "?? ?? ??"
    0xd654, 0xba74, 0x20, 0xaebc, 0xc9d0, 0x20, 0xc2dc, 0xac04, 0x0, // @591 "?? ?? ??"
    0xd654, 0xba74, 0x20, 0xbc1d, 0xae30, 0x20, 0xc870, 0xc808, 0x0, // @600 "?? ?? ??"
    0x28, 0x49, 0x43, 0x43, 0x49, 0x44, 0x29, 0x0, // @609 "(ICCID)"
    0x28, 0xbc84, 0xc804, 0x20, 0xc815, 0xbcf4, 0x29, 0x0, // @617 "(?? ??)"
    0x28, 0xc2dd, 0xbcc4, 0x20, 0xc815, 0xbcf4, 0x29, 0x0, // @625 "(?? ??)"
    0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x0, // @633 "English"
    0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x0, // @641 "Setting"
    0x57, 0x69, 0x46, 0x69, 0x20, 0xac80, 0xc0c9, 0x0, // @649 "WiFi ??"
    0x57, 0x69, 0x46, 0x69, 0x20, 0xc124, 0xc815, 0x0, // @657 "WiFi ??"
    0xb124, 0xd2b8, 0xc6cc, 0xd06c, 0x20, 0xc815, 0xbcf4, 0x0, // @665 "???? ??"
    0xc18c, 0xb9ac, 0x20, 0xbc0f, 0x20, 0xc9c4, 0xb3d9, 0x0, // @673 "?? ? ??"
    0x28, 0x49, 0x4d, 0x45, 0x49, 0x29, 0x0, // @681 "(IMEI)"
    0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x0, // @688 "Haptic"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x0, // @695 "Screen"
    0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x0, // @702 "System"
    0x7b, 0x20, 0x7d, 0x5b, 0x20, 0x5d, 0x0, // @709 "{ }[ ]"
    0x25, 0x20, 0x60, 0x20, 0x2f, 0x0, // @716 "% ` /"
    0x28, 0xbaa8, 0xb378, 0xba85, 0x29, 0x0, // @722 "(???)"
    0x2e, 0x20, 0x2c, 0x3f, 0x21, 0x0, // @728 ". ,?!"
    0x3a, 0x20, 0x3b, 0x20, 0x5e, 0x0, // @734 ": ; ^"
    0x40, 0x20, 0x23, 0x20, 0x24, 0x0, // @740 "@ # $"
    0x49, 0x43, 0x43, 0x49, 0x44, 0x0, // @746 "ICCID"
    0x52, 0x65, 0x73, 0x65, 0x74, 0x0, // @752 "Reset"
    0x53, 0x6c, 0x65, 0x65, 0x70, 0x0, // @758 "Sleep"
    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x0, // @764 "Sound"
    0x53, 0x74, 0x65, 0x70, 0x73, 0x0, // @770 "Steps"
    0x61, 0x2f, 0x31, 0x2f, 0x21, 0x0, // @776 "a/1/!"
    0xae30, 0xae30, 0x20, 0xc815, 0xbcf4, 0x0, // @782 "?? ??"
    0xb099, 0xc0c1, 0x20, 0xac10, 0xc9c0, 0x0, // @788 "?? ??"
    0xb099, 0xc0c1, 0x20, 0xbc1c, 0xc0dd, 0x0, // @794 "?? ??"
    0xc0b0, 0xc18c, 0xd3ec, 0xd654, 0xb3c4, 0x0, // @800 "?????"
    0xc0dd, 0xccb4, 0x20, 0xc815, 0xbcf4, 0x0, // @806 "?? ??"
    0xc54c, 0xb9bc, 0x20, 0xc5c6, 0xc74c, 0x0, // @812 "?? ??"
    0xc804, 0xc6d0, 0x20, 0xb044, 0xae30, 0x0, // @818 "?? ??"
    0xd1b5, 0xc2e0, 0x20, 0xc8fc, 0xae30, 0x0, // @824 "?? ??"
    0x26, 0x2a, 0x20, 0x5f, 0x0, // @830 "&* _"
    0x30, 0x30, 0x30, 0x30, 0x0, // @835 "0000"
    0x31, 0x32, 0x33, 0x34, 0x0, // @840 "1234"
    0x44, 0x6f, 0x6e, 0x65, 0x0, // @845 "Done"
    0x49, 0x4d, 0x45, 0x49, 0x0, // @850 "IMEI"
    0x53, 0x70, 0x6f, 0x32, 0x0, // @855 "Spo2"
    0x57, 0x61, 0x69, 0x74, 0x0, // @860 "Wait"
    0x7e, 0x3d, 0x2d, 0x2b, 0x0, // @865 "~=-+"
    0xac78, 0xc74c, 0x20, 0xc218, 0x0, // @870 "?? ?"
    0x61, 0x62, 0x63, 0x0, // @875 "abc"
    0x64, 0x65, 0x66, 0x0, // @879 "def"
    0x67, 0x68, 0x69, 0x0, // @883 "ghi"
    0x6a, 0x6b, 0x6c, 0x0, // @887 "jkl"
    0x6d, 0x6e, 0x6f, 0x0, // @891 "mno"
    0x70, 0x71, 0x72, 0x0, // @895 "pqr"
    0x73, 0x74, 0x75, 0x0, // @899 "stu"
    0x76, 0x77, 0x78, 0x0, // @903 "vwx"
    0xc2dc, 0xc2a4, 0xd15c, 0x0, // @907 "???"
    0xc2ec, 0xbc15, 0xc218, 0x0, // @911 "???"
    0xcd08, 0xae30, 0xd654, 0x0, // @915 "???"
    0xd55c, 0xad6d, 0xc5b4, 0x0, // @919 "???"
    0x31, 0x32, 0x0, // @923 "12"
    0x79, 0x7a, 0x0, // @926 "yz"
    0xb300, 0xae30, 0x0, // @929 "??"
    0xc18c, 0xb9ac, 0x0, // @932 "??"
    0xc218, 0xba74, 0x0, // @935 "??"
    0xc54c, 0xb9bc, 0x0, // @938 "??"
    0xc5b8, 0xc5b4, 0x0, // @941 "??"
    0xc644, 0xb8cc, 0x0, // @944 "??"
    0xc7ac, 0xb09c, 0x0, // @947 "??"
    0xcd9c, 0xb3d9, 0x0, // @950 "??"
    0xd654, 0xba74, 0x0, // @953 "??"
    0x31, 0x0, // @956 "1"
    0x35, 0x0, // @958 "5"
    0x36, 0x0, // @960 "6"
    0x37, 0x0, // @962 "7"
    0x38, 0x0, // @964 "8"
    0x39, 0x0 // @966 "9"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesKorean[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[2] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb,
    indicesKorean
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 2)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
