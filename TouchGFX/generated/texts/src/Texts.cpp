/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x24, 0x47, 0x50, 0x47, 0x47, 0x41, 0x3a, 0x20, 0x2, 0x0, // @0 "$GPGGA: <>"
    0x24, 0x47, 0x50, 0x47, 0x4c, 0x4c, 0x3a, 0x20, 0x2, 0x0, // @10 "$GPGLL: <>"
    0x24, 0x47, 0x50, 0x47, 0x53, 0x41, 0x3a, 0x20, 0x2, 0x0, // @20 "$GPGSA: <>"
    0x24, 0x47, 0x50, 0x47, 0x53, 0x56, 0x3a, 0x20, 0x2, 0x0, // @30 "$GPGSV: <>"
    0x24, 0x47, 0x50, 0x52, 0x4d, 0x43, 0x3a, 0x20, 0x2, 0x0, // @40 "$GPRMC: <>"
    0x47, 0x4e, 0x53, 0x53, 0x3a, 0x20, 0x2, 0x0, // @50 "GNSS: <>"
    0x31, 0x31, 0x3a, 0x20, 0x2, 0x20, 0x0, // @58 "11: <> "
    0x32, 0x30, 0x3a, 0x20, 0x2, 0x20, 0x0, // @65 "20: <> "
    0x32, 0x33, 0x3a, 0x20, 0x2, 0x20, 0x0, // @72 "23: <> "
    0x32, 0x35, 0x3a, 0x20, 0x2, 0x20, 0x0, // @79 "25: <> "
    0x47, 0x4e, 0x53, 0x53, 0x20, 0x2, 0x0, // @86 "GNSS <>"
    0x47, 0x4e, 0x53, 0x53, 0x3a, 0x2, 0x0, // @93 "GNSS:<>"
    0x31, 0x30, 0x3a, 0x20, 0x2, 0x0, // @100 "10: <>"
    0x31, 0x32, 0x3a, 0x20, 0x2, 0x0, // @106 "12: <>"
    0x31, 0x33, 0x3a, 0x20, 0x2, 0x0, // @112 "13: <>"
    0x31, 0x34, 0x3a, 0x20, 0x2, 0x0, // @118 "14: <>"
    0x31, 0x35, 0x3a, 0x20, 0x2, 0x0, // @124 "15: <>"
    0x31, 0x36, 0x3a, 0x20, 0x2, 0x0, // @130 "16: <>"
    0x31, 0x37, 0x3a, 0x20, 0x2, 0x0, // @136 "17: <>"
    0x31, 0x38, 0x3a, 0x20, 0x2, 0x0, // @142 "18: <>"
    0x31, 0x39, 0x3a, 0x20, 0x2, 0x0, // @148 "19: <>"
    0x32, 0x31, 0x3a, 0x20, 0x2, 0x0, // @154 "21: <>"
    0x32, 0x32, 0x3a, 0x20, 0x2, 0x0, // @160 "22: <>"
    0x32, 0x34, 0x3a, 0x20, 0x2, 0x0, // @166 "24: <>"
    0x32, 0x36, 0x3a, 0x20, 0x2, 0x0, // @172 "26: <>"
    0x32, 0x37, 0x3a, 0x20, 0x2, 0x0, // @178 "27: <>"
    0x32, 0x38, 0x3a, 0x20, 0x2, 0x0, // @184 "28: <>"
    0x32, 0x39, 0x3a, 0x20, 0x2, 0x0, // @190 "29: <>"
    0x33, 0x31, 0x3a, 0x20, 0x2, 0x0, // @196 "31: <>"
    0x33, 0x32, 0x3a, 0x20, 0x2, 0x0, // @202 "32: <>"
    0x36, 0x3a, 0x20, 0x2, 0x20, 0x0, // @208 "6: <> "
    0x39, 0x3a, 0x20, 0x2, 0x20, 0x0, // @214 "9: <> "
    0x2d, 0x2d, 0x2c, 0x2d, 0x2d, 0x2c, 0x2d, 0x2d, 0x0, // @220 "--,--,--"
    0x24, 0x47, 0x50, 0x47, 0x47, 0x41, 0x0, // @229 "$GPGGA"
    0x24, 0x47, 0x50, 0x47, 0x4c, 0x4c, 0x0, // @236 "$GPGLL"
    0x24, 0x47, 0x50, 0x47, 0x53, 0x41, 0x0, // @243 "$GPGSA"
    0x24, 0x47, 0x50, 0x47, 0x53, 0x56, 0x0, // @250 "$GPGSV"
    0x24, 0x47, 0x50, 0x52, 0x4d, 0x43, 0x0, // @257 "$GPRMC"
    0x43, 0x2f, 0x4e, 0x30, 0x3a, 0x0, // @264 "C/N0:"
    0x4e, 0x4d, 0x45, 0x41, 0x3a, 0x0, // @270 "NMEA:"
    0x30, 0x30, 0x0, // @276 "00"
    0x31, 0x30, 0x0, // @279 "10"
    0x31, 0x31, 0x0, // @282 "11"
    0x31, 0x32, 0x0, // @285 "12"
    0x31, 0x33, 0x0, // @288 "13"
    0x31, 0x34, 0x0, // @291 "14"
    0x31, 0x35, 0x0, // @294 "15"
    0x31, 0x36, 0x0, // @297 "16"
    0x31, 0x37, 0x0, // @300 "17"
    0x31, 0x38, 0x0, // @303 "18"
    0x31, 0x39, 0x0, // @306 "19"
    0x32, 0x30, 0x0, // @309 "20"
    0x32, 0x31, 0x0, // @312 "21"
    0x32, 0x32, 0x0, // @315 "22"
    0x32, 0x33, 0x0, // @318 "23"
    0x32, 0x34, 0x0, // @321 "24"
    0x32, 0x35, 0x0, // @324 "25"
    0x32, 0x36, 0x0, // @327 "26"
    0x32, 0x37, 0x0, // @330 "27"
    0x32, 0x38, 0x0, // @333 "28"
    0x32, 0x39, 0x0, // @336 "29"
    0x33, 0x30, 0x0, // @339 "30"
    0x33, 0x31, 0x0, // @342 "31"
    0x33, 0x32, 0x0 // @345 "32"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
